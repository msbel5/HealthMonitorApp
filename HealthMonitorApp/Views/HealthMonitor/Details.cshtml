@using System.Web
@model HealthMonitorApp.Models.ServiceStatus

@{
    ViewBag.Title = "Service Status Details";
    Layout = "_Layout";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service Status Details</title>
    <style>
        .code-display {
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 10px;
            font-family: 'Courier New', Courier, monospace;
            white-space: pre-wrap; /* For text wrapping */
            overflow-x: auto; /* For horizontal scrolling */
        }
        #responseTreeView li.selected {
            background-color: #e0e0e0;
        }
        #editor {
            height: 300px; /* Adjust height as needed */
        }
        .curl-command-container {
            margin-top: 0; /* Remove top margin */
            padding-top: 0; /* Remove top padding if needed */
            white-space: pre-wrap;
            word-break: break-all;
            overflow-x: auto;
        }
        .response-content-container {
            max-height: 300px; /* Set maximum height */
            overflow-y: auto; /* Enable vertical scrolling */
            white-space: pre-wrap;
            word-break: break-all;
            overflow-x: auto;
        }
        .curl-command-inline {
            display: inline; /* Make the container inline */
            padding-left: 5px; /* Adjust as needed for spacing */
            white-space: pre-wrap;
            word-break: break-all;
            overflow-x: auto;
        }
    </style>
</head>

<body>

<<div class="container mt-5">
     <h2 class="text-center">Service Status Details</h2>

     <dl class="row">
         <dt class="col-sm-4">Service Status Name</dt>
         <dd class="col-sm-8">@Model.Name</dd>

         <dt class="col-sm-4">Expected Status Code</dt>
         <dd class="col-sm-8">@Model.ApiEndpoint.ExpectedStatusCode</dd>

         <dt class="col-sm-4">API Group</dt>
         <dd class="col-sm-8">@Model.ApiEndpoint.ApiGroup.Name</dd>
         <dt class="col-sm-4">CURL Command</dt>
         <div class="col-sm-8" style="padding-top: 0; margin-top: -1rem;">
            <span class="curl-command-inline" id="curl-commands-details-container"></span>
        </div>         @if (Model.AssertionScript != null){
         <dt class="col-sm-4">Assertion Script</dt>
         <dd class="col-sm-8">
            <div class="code-display" id="editor"></div>
         </dd>}
         @if (Model.ResponseContent != null){
         <dt class="col-sm-4">Response Content</dt>
         <dd class="col-sm-8 response-content-container">@Model.ResponseContent</dd>}
     </dl>
 </div>
<div class="text-center">
    <a asp-action="Edit" asp-route-id="@Model.ID">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
</body>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.js"></script>
    <script>
        $(document).ready(function () {

            if ('@Model.AssertionScript' !== '') {
                require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' }});
                require(['vs/editor/editor.main'], function () {
                    var editor = monaco.editor.create(document.getElementById('editor'), {
                        value: `@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.AssertionScript))`,
                        language: 'csharp',
                        readOnly: true, // Make the editor read-only
                        theme: 'vs-dark',
                        lineNumbers: 'off', // Optionally turn off line numbers if you prefer
                        minimap: { enabled: false } // Disable minimap
                    });
                });
            }

            // Encode the CURL command to ensure proper handling of special characters
            var encodedCurlCommands = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.ApiEndpoint.cURL))';

            // Split the CURL commands and display them with numbers
            var curlCommands = encodedCurlCommands.split('&&&');
            if (curlCommands.length > 1) {
                curlCommands.forEach(function (command, index) {
                    if (command) { // Check if the command is not an empty string
                        $('#curl-commands-details-container').append('<p><strong style="color: #1b6ec2">' + (index + 1) + '.</strong> ' + command + '</p>');
                    }
                });
            } else {
                    if (curlCommands[0]) { // Check if the command is not an empty string
                        $('#curl-commands-details-container').append('<p>' + curlCommands[0] + '</p>');
                    }
            }
        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}