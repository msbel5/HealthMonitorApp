@using System.Web
@model ServiceStatus

@{
    ViewBag.Title = "Service Status Details";
    Layout = "_Layout";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Service Status Details</title>
    <style>
        .code-display {
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 5px;
            font-family: 'Courier New', Courier, monospace;
            white-space: pre-wrap; /* For text wrapping */
            overflow-x: auto; /* For horizontal scrolling */
        }
        #responseTreeView li.selected {
            background-color: #e0e0e0;
        }
        #editor {
            height: 300px; /* Adjust height as needed */
        }
        .curl-command-container {
            margin-top: 0; /* Remove top margin */
            padding-top: 0; /* Remove top padding if needed */
            white-space: pre-wrap;
            word-break: break-all;
            overflow-x: auto;
        }
        .response-content-container {
            max-height: 300px; /* Set maximum height */
            overflow-y: auto; /* Enable vertical scrolling */
            white-space: pre-wrap;
            word-break: break-all;
            overflow-x: auto;
        }
        .curl-command-inline {
            display: inline; /* Make the container inline */
            padding-left: 5px; /* Adjust as needed for spacing */
            white-space: pre-wrap;
            word-break: break-all;
            overflow-x: auto;
        }
    </style>
</head>

<body>

<
<div class="container mt-5">
    <h2 class="text-center">Service Status Details</h2>

    <dl class="row">
        <dt class="col-sm-4">Service Status Name</dt>
        <dd class="col-sm-8">@Model.Name</dd>

        <dt class="col-sm-4">Expected Status Code</dt>
        <dd class="col-sm-8">@Model.ApiEndpoint.ExpectedStatusCode</dd>

        <dt class="col-sm-4">API Group</dt>
        <dd class="col-sm-8">@Model.ApiEndpoint.ApiGroup.Name</dd>
        <dt class="col-sm-4">CURL Command</dt>
        <div class="col-sm-8" style="padding-top: 0; margin-top: -1.5rem;">
            <span class="curl-command-inline" id="curl-commands-details-container"></span>
        </div>
        @if (Model.AssertionScript != null)
        {
            <dt class="col-sm-4">Assertion Script</dt>
            <dd class="col-sm-8">
                <div class="code-display" id="editor"></div>
            </dd>
        }
        @if (Model.ResponseContent != null)
        {
            <dt class="col-sm-4">Response Content</dt>
            <dd class="col-sm-8 response-content-container"></dd>
        }
    </dl>
</div>
<div class="text-center">
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
    <a asp-action="Index">Back to List</a>
</div>
</body>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.js"></script>
    <script>
        $(document).ready(function () {

            if ('@Model.AssertionScript' !== '') {
                require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' }});
                require(['vs/editor/editor.main'], function () {
                    var editor = monaco.editor.create(document.getElementById('editor'), {
                        value: `@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.AssertionScript))`,
                        language: 'csharp',
                        readOnly: true, // Make the editor read-only
                        theme: 'vs-dark',
                        lineNumbers: 'on', // Optionally turn off line numbers if you prefer
                        minimap: { enabled: false } // Disable minimap
                    });
                });
            }

            // Encode the CURL command to ensure proper handling of special characters
            var encodedCurlCommands = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.ApiEndpoint.cURL))';
            var curlCommands = encodedCurlCommands.split('&&&');
            displayCurlCommands(curlCommands);
            
            // Handle Response Content Display
            var responseContent = '@Html.Raw(HttpUtility.JavaScriptStringEncode(Model.ResponseContent))';
            var responseParts = responseContent.split('&&&');
            displayResponseContent(responseParts);
            });
            
            function displayCurlCommands(curlCommands) {
            curlCommands.forEach(function(command, index) {
               var commandDisplay = command ? '<p><strong style="color: #1b6ec2">' + (index + 1) + '.</strong> ' + command + '</p>' : '';
               $('#curl-commands-details-container').append(commandDisplay);
            });
            }
            
            function displayResponseContent(responseParts) {
                responseParts.forEach(function(part, index) {
                    if (part.trim() !== '') {
                        var responseContainer = $('<div class="code-display" style="margin-bottom: 10px;"></div>');
                        var responseNumber = responseParts.length > 1 ? '<strong style="color: #1b6ec2">' + (index + 1) + '.</strong> ' : '';
                        responseContainer.append(responseNumber);
                        if (isHTML(part)) {
                            responseContainer.append($('<iframe>', {
                                srcdoc: part,
                                class: 'response-iframe',
                                frameborder: 0,
                                width: '100%',
                                height: '300px'
                            }));
                        } else {
                            responseContainer.append($('<pre>').text(part));
                        }
                        $('.response-content-container').append(responseContainer);
                    }
                });
            }
    
            function isHTML(str) {
                return /<[^>]+>/.test(str);
            }
            </script>
    <style>
            .response-iframe {
                width: 100%;
                border: none;
                margin-bottom: 10px;
            }
            pre {
                white-space: pre-wrap;
                word-wrap: break-word;
            }
            </style>

    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}