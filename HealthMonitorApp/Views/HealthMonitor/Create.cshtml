    @model HealthMonitorApp.ViewModels.ServiceStatusCreateViewModel

    @{
        ViewBag.Title = "Create Service Status";
        Layout = "_Layout";
    }

    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Create Service Status</title>
        <style>
            .container {
                max-width: 600px;
            }
            #editor {
                height: 300px; /* Adjust height as needed */
            }
            .code-display {
                position: relative; /* Add relative positioning */
                background-color: #f9f9f9;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 0; /* Remove padding to allow the editor to fill the space */
                font-family: 'Courier New', Courier, monospace;
                overflow: hidden; /* Add this to prevent overflow */
            }
        </style>
    </head>
    <body>

    <div class="container mt-5">
        <h2 class="text-center">Create Service Status</h2>
        <form asp-action="Create" asp-controller="HealthMonitor" method="post">
            <!-- Service Status Name -->
            <div class="form-group">
                <label for="Name">Service Status Name</label>
                <input type="text" class="form-control" id="Name" name="ServiceName" required>
            </div>
            <!-- Expected Status Code -->
            <div class="form-group">
                <label for="ExpectedStatusCode">Expected Status Code</label>
                <input type="number" class="form-control" id="ExpectedStatusCode" name="ExpectedStatusCode" required>
            </div>
            <!-- CURL Command -->
            <div class="form-group">
                <div class="d-flex justify-content-between align-items-center">
                    <label for="CurlCommand" class="mb-0">CURL Command</label>
                    <div>
                        <button type="button" id="remove-curl-command" class="btn btn-link p-0" style="display: none;"><i class="fa fa-minus"></i></button>  <!-- Added inline style to hide the button initially -->
                        <button type="button" id="add-curl-command" class="btn btn-link p-0"><i class="fa fa-plus"></i></button>
                        <button type="button" id="helpIcon" class="btn btn-link p-0"><i class="fa fa-question-circle"></i></button>
                    </div>
                </div>
                <div id="curl-commands-container">
                    <textarea class="form-control curl-command" rows="4" name="cURL"></textarea>
                </div>
            </div>
            <!-- Existing API Groups -->
            <div class="form-group">
                <label for="ExistingApiGroups">API Groups</label>
                <select class="form-control" id="ExistingApiGroups" name="ApiGroupID">
                    <option value="auto" selected>Auto Group</option>
                    <option value="addNew">Add New API Group</option>
                    @foreach(var group in Model.ApiGroups)
                    {
                        <option value="@group.ID">@group.Name</option>
                    }
                </select>
            </div>
            <!-- New API Group Name -->
            <div class="form-group" id="newApiGroupDiv" style="display:none;">
                <label for="NewApiGroupName">New API Group Name</label>
                <input type="text" class="form-control" id="NewApiGroupName" name="NewApiGroupName">
            </div>

            <!-- Custom Assertion -->
            <div class="form-group">
                <label asp-for="AssertionScript">Assertion Script (Optional)</label>
                <div class="code-display" id="editor"></div> <!-- Monaco Editor will be initialized here -->
            </div>
            <!-- Create Button -->
            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary">Create</button>
            </div>
        </form>
        <div id="errorDiv" style="color: red; display:none;">
            <strong>Error:</strong> <span id="errorMsg">
                @if (TempData["Error"] != null)
                {
                    <div class="alert alert-danger">
                        @TempData["Error"]
                    </div>
                }
            </span>
        </div>
    </div>

    <div>
        <a asp-action="Index">Back to List</a>
    </div>
    </body>

    @section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.js"></script>
    <!-- Load Monaco Editor -->
    <script>
        $(document).ready(function () {
            // Existing jQuery handlers
            $('#ExistingApiGroups').change(function () {
                if ($(this).val() === 'addNew') {
                    $('#newApiGroupDiv').show();
                } else {
                    $('#newApiGroupDiv').hide();
                }
            });

            $('#add-curl-command').click(function () {
                var newTextArea = '<textarea class="form-control curl-command mt-2" rows="4" name="cURL"></textarea>';
                $('#curl-commands-container').append(newTextArea);
                $('#remove-curl-command').show();
            });

            $('#remove-curl-command').click(function () {
                if ($('.curl-command').length > 1) {
                    $('.curl-command:last').remove();
                    if ($('.curl-command').length === 1) {
                        $('#remove-curl-command').hide();
                    }
                }
            });

            // Help icon handler
            $('#helpIcon').click(function () {
                var message = 'You can add dynamic strings using the following format: \n';
                message += '${{JS_CODE}}';
                alert(message);
            });

            // Monaco Editor initialization
            require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' }});
            require(['vs/editor/editor.main'], function () {
                var editor = monaco.editor.create(document.getElementById('editor'), {
                    language: 'csharp',
                    theme: 'vs-dark',
                    value: 'public bool AssertResponse(HttpResponseMessage response){\n    // Write your code here\n}',
                    readOnly: false,
                    minimap: { enabled: false }, // Disable or adjust minimap settings
                    automaticLayout: true /* This ensures the editor size adjusts to the container */
                });

                function updateReadOnlyLines() {
                    var model = editor.getModel();
                    var lineCount = model.getLineCount();
                    var firstLineLength = model.getLineMaxColumn(1);
                    var lastLineLength = model.getLineMaxColumn(lineCount);

                    var readOnlyRanges = [
                        new monaco.Range(1, 1, 1, firstLineLength),
                        new monaco.Range(lineCount, 1, lineCount, lastLineLength)
                    ];

                    return editor.deltaDecorations([], readOnlyRanges.map(range => ({
                        range: range, options: { isWholeLine: true, linesDecorationsClassName: 'readOnlyDecoration' }
                    })));
                }

                var decorations = updateReadOnlyLines();

                editor.onDidChangeModelContent(function (e) {
                    decorations = updateReadOnlyLines();
                });
            });

            $('form').submit(function (e) {
                var code = editor.getValue();
                $('<input>').attr({
                    type: 'hidden',
                    name: 'AssertionScript',
                    value: code
                }).appendTo('form');

                var commands = [];
                $('.curl-command').each(function () {
                    commands.push($(this).val());
                });
                $('.curl-command:first').val(commands.join('&&&'));
                
                
            });
        });
    </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}