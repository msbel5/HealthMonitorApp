@model HealthMonitorApp.ViewModels.ServiceStatusCreateViewModel

@{
    ViewBag.Title = "Create Service Status";
    Layout = "_Layout";
}

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Service Status</title>
    <style>
            .container {
                max-width: 600px;
            }
            #editor {
                height: 300px; /* Adjust height as needed */
            }
            .code-display {
                position: relative; /* Add relative positioning */
                background-color: #f9f9f9;
                border: 1px solid #ccc;
                border-radius: 4px;
                padding: 5px; /* Remove padding to allow the editor to fill the space */
                font-family: 'Courier New', Courier, monospace;
                overflow: hidden; /* Add this to prevent overflow */
            }
            .field-validation-error {
                color: #dc3545; /* Bootstrap's danger color */
                font-size: 0.875rem;
                margin-top: 0.25rem;
                margin-bottom: 0.25rem;
                float: right;
            }
        </style>
</head>
<body>

<div class="container mt-5">
    <h2 class="text-center">Create Service Status</h2>
    <form asp-action="Create" asp-controller="HealthMonitor" method="post">
        <!-- Service Status Name -->
        <div class="form-group">
            <label for="Name">Service Status Name</label>
            @Html.ValidationMessageFor(model => model.ServiceName)
            <input type="text" class="form-control" id="Name" name="ServiceName" required maxlength="100">
        </div>
        <!-- Expected Status Code -->
        <div class="form-group">
            <label for="ExpectedStatusCode">Expected Status Code</label>
            @Html.ValidationMessageFor(model => model.ExpectedStatusCode)
            <input type="number" class="form-control" id="ExpectedStatusCode" name="ExpectedStatusCode" required min="100" max="599">
        </div>
        <!-- CURL Command -->
        <div class="form-group">
            <div class="d-flex justify-content-between align-items-center">
                <label for="CurlCommand" class="mb-0">CURL Command</label>
                @Html.ValidationMessageFor(model => model.cURL)
                <div style="float: right">
                    <button type="button" id="remove-curl-command" class="btn btn-link p-0" style="display: none;">
                        <i class="fa fa-minus"></i>
                    </button> <!-- Added inline style to hide the button initially -->
                    <button type="button" id="add-curl-command" class="btn btn-link p-0">
                        <i class="fa fa-plus"></i>
                    </button>
                    <button type="button" id="helpIcon" class="btn btn-link p-0">
                        <i class="fa fa-question-circle"></i>
                    </button>
                </div>
            </div>
            <div id="curl-commands-container">
                <textarea class="form-control curl-command" rows="4" name="cURL" required pattern="^(https?:\/\/.+|curl\s+.+)$" title="The cURL field must be a valid URL or cURL command."></textarea>
            </div>
        </div>
        <!-- Existing API Groups -->
        <div class="form-group">
            <label for="ExistingApiGroups">API Groups</label>
            <select class="form-control" id="ExistingApiGroups" name="ApiGroupID">
                <option value="auto" selected>Auto Group</option>
                <option value="addNew">Add New API Group</option>
                @if (Model.ApiGroups != null)
                {
                    @foreach (var group in Model.ApiGroups)
                    {
                        <option value="@group.ID">@group.Name</option>
                    }
                }
            </select>
        </div>
        <!-- New API Group Name -->
        <div class="form-group" id="newApiGroupDiv" style="display:none;">
            <label for="NewApiGroupName">New API Group Name</label>
            <input type="text" class="form-control" id="NewApiGroupName" name="NewApiGroupName">
        </div>


        <!-- Custom Assertion -->
        <div class="form-group">
            <div class="d-flex justify-content-between align-items-center">
                <label asp-for="AssertionScript">Assertion Script (Optional)</label>
                <button type="button" class="btn btn-link p-0" data-bs-toggle="modal" data-bs-target="#assertionHelpModal">
                    <i class="fa fa-question-circle"></i>
                </button>
            </div>
            <div class="code-display" id="editor"></div>
        </div>

        <!-- Create Button -->
        <div class="form-group text-center">
            <button type="submit" class="btn btn-primary">Create</button>
        </div>
    </form>
    <div id="errorDiv" style="color: red; display:none;">
        <strong>Error:</strong>
        <span id="errorMsg">
            @if (TempData["Error"] != null)
            {
                <div class="alert alert-danger">
                    @TempData["Error"]
                </div>
            }
        </span>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>
</body>

@await Html.PartialAsync("_AssertionHelpModal")
@await Html.PartialAsync("_DynamicStringHelpModal")

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs/loader.js"></script>
    <!-- Load Monaco Editor -->
    <script>
        
        var editor; // Declare editor globally
    
        function initializeMonacoEditor() {
            require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.44.0/min/vs' }});
            require(['vs/editor/editor.main'], function () {
                editor = monaco.editor.create(document.getElementById('editor'), {
                    language: 'csharp',
                    theme: 'vs-dark',
                    readOnly: false,
                    lineNumbers: 'on', // Optionally turn off line numbers if you prefer
                    minimap: { enabled: false },
                    automaticLayout: true
                });
            });
        }
    
        function insertScriptIntoEditor(script) {
            if (editor && typeof editor.setValue === 'function') {
                editor.setValue(script);
            }
        }
    
        $(document).ready(function () {
            // Existing jQuery handlers
            $('#ExistingApiGroups').change(function () {
                if ($(this).val() === 'addNew') {
                    $('#newApiGroupDiv').show();
                } else {
                    $('#newApiGroupDiv').hide();
                }
            });

            $('#add-curl-command').click(function () {
                var newTextArea = '<textarea class="form-control curl-command mt-2" rows="4" name="cURL"></textarea>';
                $('#curl-commands-container').append(newTextArea);
                $('#remove-curl-command').show();
            });

            $('#remove-curl-command').click(function () {
                if ($('.curl-command').length > 1) {
                    $('.curl-command:last').remove();
                    if ($('.curl-command').length === 1) {
                        $('#remove-curl-command').hide();
                    }
                }
            });

            // Help icon handler
            var dynamicStringHelpModal = new bootstrap.Modal(document.getElementById('dynamicStringHelpModal'));

            $('#helpIcon').click(function () {
                dynamicStringHelpModal.show();
            });
            
            $(".btn-dynamicString").click(function(){
                dynamicStringHelpModal.hide();
            });
            
            // Monaco Editor initialization
            initializeMonacoEditor();
            
            // Initialize Bootstrap Modal
            var assertionHelpModal = new bootstrap.Modal(document.getElementById('assertionHelpModal'));
            
            $('#editorHelpIcon').click(function() {
                assertionHelpModal.show();
            });
            
            $(".close, .btn-secondary").click(function(){
                assertionHelpModal.hide();
            });
                        
            // Handlers for predefined script buttons
            $('#addPdfTextCheck').click(function() {
                var pdfScript =
`using (var memoryStream = new MemoryStream())
{
    await response.Content.CopyToAsync(memoryStream);
    memoryStream.Position = 0; // Reset the position after copying

    using (var pdfReader = new iText.Kernel.Pdf.PdfReader(memoryStream))
    using (var pdfDocument = new iText.Kernel.Pdf.PdfDocument(pdfReader))
    {
        var strategy = new iText.Kernel.Pdf.Canvas.Parser.Listener.SimpleTextExtractionStrategy();
        var text = new StringBuilder();
        for (int page = 1; page <= pdfDocument.GetNumberOfPages(); page++)
        {
            var pageContent = iText.Kernel.Pdf.Canvas.Parser.PdfTextExtractor.GetTextFromPage(pdfDocument.GetPage(page), strategy);
            text.AppendLine(pageContent);
        }

        return text.ToString().Contains(\"A Simple PDF File\");
    }
        }`;
                insertScriptIntoEditor(pdfScript);
                assertionHelpModal.hide();
            });
            
            $('#addJsonValueCheck').click(function() {
                var jsonScript = 
`var responseContent = await response.Content.ReadAsStringAsync();
var jsonResponse = Newtonsoft.Json.Linq.JObject.Parse(responseContent);
return (string)jsonResponse["specificKey"] == "expectedValue";`;
                insertScriptIntoEditor(jsonScript);
                assertionHelpModal.hide();
            });
            
            $('#addImageTextCheck').click(function() {
                var imageTextCheckScript = 
`using (var imageStream = await response.Content.ReadAsStreamAsync())
{
    var ocrEngine = new Tesseract.TesseractEngine(@@"./tessdata", "eng", Tesseract.EngineMode.Default);
    var img = Pix.LoadFromStream(imageStream);
    var page = ocrEngine.Process(img);
    var text = page.GetText();
    return text.Contains("expectedTextInImage");
}`;
                insertScriptIntoEditor(imageTextCheckScript);
                assertionHelpModal.hide();
            });
            
            $('#addZipFileCheck').click(function() {
                var zipFileCheckScript = 
`using (var zipStream = await response.Content.ReadAsStreamAsync())
using (var archive = new System.IO.Compression.ZipArchive(zipStream))
{
    return archive.Entries.Any(entry => entry.FullName == "specificFileName.txt");
}`;
                insertScriptIntoEditor(zipFileCheckScript);
                assertionHelpModal.hide();
            });
            
            $('#addResponseTextCheck').click(function() {
                var responseTextCheckScript = 
`var responseText = await response.Content.ReadAsStringAsync();
return responseText.Contains("expectedTextInResponse");`;
                insertScriptIntoEditor(responseTextCheckScript);
                assertionHelpModal.hide();
            });
                        
            $('form').submit(function (e) {
                var code = editor.getValue();
                $('<input>').attr({
                    type: 'hidden',
                    name: 'AssertionScript',
                    value: code
                }).appendTo('form');

                var commands = [];
                $('.curl-command').each(function () {
                    commands.push($(this).val());
                });
                $('.curl-command:first').val(commands.join('&&&'));
                
                
            });
        });
    </script>
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
}