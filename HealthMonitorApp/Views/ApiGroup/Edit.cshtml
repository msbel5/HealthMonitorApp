@model HealthMonitorApp.ViewModels.ApiGroupViewModel

@{
    ViewBag.Title = "Edit API Group";
    Layout = "_Layout";
}

<style>
    .form-group {
        display: flex;
        align-items: flex-end; 
        flex-wrap: wrap;
        gap: 10px; 
    }
    .variable-group {
        display: flex;
        align-items: center;
        gap: 10px; 
    }
    .variable-group > * {
        flex: 1; 
    }
    #addVariableButton, .removeVariableButton {
        flex-grow: 0; 
    }
    #variablesTitle {
        display: block; /* Change this to 'block' since we might have variables to show */
    }
</style>

<form asp-action="Edit" id="apiGroupForm" style="max-width: 500px; margin: auto;">
    <input type="hidden" asp-for="ApiGroup.Id" />
    <h2 style="text-align: center;">Edit API Group</h2>

    <div class="form-group">
        <div class="flex-grow-1">
            <input asp-for="ApiGroup.Name" class="form-control" placeholder="Name"/>
            <span asp-validation-for="ApiGroup.Name" class="text-danger"></span>
        </div>
        <button type="button" id="addVariableButton" class="btn btn-secondary">Add Variable</button>
    </div>

    <h3 id="variablesTitle" style="text-align: center;">Variables</h3>
    <div id="variablesContainer">
        @for (int i = 0; i < Model.Variables.Count; i++)
        {
            <div class="variable-group d-flex align-items-center mb-2">
                <input type="text" asp-for="Variables[i].Name" class="form-control" placeholder="Name"/> =
                <input type="password" asp-for="Variables[i].Value" class="form-control ml-2" placeholder="Value"/>
                <button type="button" class="removeVariableButton btn btn-danger ml-2">-</button>
            </div>
        }
    </div>

    <div class="form-group mt-3">
        <input type="submit" value="Save" class="btn btn-primary"/>
    </div>
</form>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const variablesContainer = document.getElementById('variablesContainer');
            const addVariableButton = document.getElementById('addVariableButton');
            const variablesTitle = document.getElementById('variablesTitle');

            function updateVariablesTitleVisibility() {
                variablesTitle.style.display = variablesContainer.children.length > 0 ? 'block' : 'none';
            }

            addVariableButton.addEventListener('click', function () {
                const variableIndex = variablesContainer.children.length;
                const variableDiv = document.createElement('div');
                variableDiv.className = 'variable-group d-flex align-items-center mb-2';
                variableDiv.innerHTML = `
                    <input type="text" name="Variables[${variableIndex}].Name" class="form-control" placeholder="Name" /> = 
                    <input type="text" name="Variables[${variableIndex}].Value" class="form-control ml-2" placeholder="Value" />
                    <button type="button" class="removeVariableButton btn btn-danger ml-2">-</button>
                `;

                variablesContainer.appendChild(variableDiv);

                variableDiv.querySelector('.removeVariableButton').addEventListener('click', function () {
                    variableDiv.remove();
                    updateVariablesTitleVisibility();
                });

                updateVariablesTitleVisibility();
            });

            document.querySelectorAll('.removeVariableButton').forEach(button => {
                button.addEventListener('click', function () {
                    button.parentElement.remove();
                    updateVariablesTitleVisibility();
                });
            });

            updateVariablesTitleVisibility(); // Update visibility based on initial content
        });
    </script>
}
